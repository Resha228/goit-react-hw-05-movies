{"version":3,"file":"static/js/123.17f38830.chunk.js","mappings":"wNAGAA,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAS,mCAAG,WAAOC,EAAKC,GAAZ,uFACAH,EAAAA,EAAAA,IAAA,UACjBE,EADiB,oBAJF,oCAIE,cACQC,QADR,IACQA,EAAAA,EAAQ,KAFhB,cACjBC,EADiB,yBAGhBA,EAASD,MAHO,2CAAH,uD,oICgDtB,UAhDgB,WACd,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,iBAAaN,EAAb,YAEhBO,YAAU,iBAAC,gHAEmBX,EAAAA,EAAAA,GAAUU,GAF7B,mBAGiB,KAAb,QADHE,EAFD,EAECA,eACG,IAAPA,OAAA,EAAAA,EAASC,QAHN,uBAILC,EAAAA,EAAAA,IAAM,qBAJD,0BAOPN,GAAW,OAAII,IAPR,kDASPG,QAAQC,KAAR,MACAF,EAAAA,GAAAA,MAAY,iCAVL,0DAYR,IACJ,GAAE,CAACV,KAGF,6BACe,OAAZG,GACC,uBAAG,sCAIH,+BACGA,QADH,IACGA,OADH,EACGA,EAASU,KAAI,SAAAC,GAAI,OAChB,2BACE,yBAAG,YACO,yBAAIA,EAAKC,OAAO,WAE1B,iBAAMC,MAAO,CAAEC,eAAgB,aAA/B,SACGH,EAAKI,WAAWC,MAAM,EAAG,OAE5B,uBAAIL,EAAKM,WACT,oBARON,EAAKO,GADE,OAgB3B,C","sources":["components/API.js","pages/Reviews.js"],"sourcesContent":["import axios from 'axios';\n\nexport const API_KEY = '4b344883b82fcf079d9187a8a7651085';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchData = async (way, data) => {\n  const response = await axios.get\n    (`${way}?api_key=${API_KEY}${data ?? ''}`);\n  return response.data;\n};\n\n\n\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport { fetchData } from 'components/API';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [details, setDetails] = useState(null);\n\n  useEffect(() => {\n    const wayReviews = `/movie/${movieId}/reviews`;\n\n    setTimeout(async () => {\n      try {\n        const { results } = await fetchData(wayReviews);\n        if (results?.length === 0) {\n          toast('Sorry, no reviews');\n          return;\n        }\n        setDetails([...results]);\n      } catch (error) {\n        console.warn(error);\n        toast.error('Oops! Something went wrong...');\n      }\n    }, 300);\n  }, [movieId]);\n\n  return (\n    <section>\n      {details === null ? (\n        <p>\n          No any reviews for this movie...\n        </p>\n      ) : (\n        <ul>\n          {details?.map(item => (\n            <li key={item.id}>\n              <p>\n                Author: <b>{item.author} </b>\n              </p>\n              <span style={{ textDecoration: 'underline' }}>\n                {item.created_at.slice(0, 10)}\n              </span>\n              <p>{item.content}</p>\n              <hr />\n            </li>\n          ))}\n        </ul>\n      )}\n    </section>\n  );\n};\n\nexport default Reviews;"],"names":["axios","fetchData","way","data","response","movieId","useParams","useState","details","setDetails","useEffect","wayReviews","setTimeout","results","length","toast","console","warn","map","item","author","style","textDecoration","created_at","slice","content","id"],"sourceRoot":""}